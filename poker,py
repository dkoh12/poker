import random

def deal(numhands, n=5, deck=[r+s for r in '23456789TJQKA' for s in 'SHDC']):
	"shuffle the deck and deal out numhands n-card hands"
	random.shuffle(deck)
	return [deck[n*i:n*(i+1)] for i in range(numhands)]

def poker(hands):
	"return a list of the winning hand: poker([hand, ...]) => [hand,...]"
	# return max(hands, key=hand_rank) #takes list and returns highest one
	return allmax(hands, key=hand_rank) #takes list and returns highest one

	#print max([3,4,5,0]), max([3,4,-5,0], key=abs)

def allmax(iterable, key=None):
	"return a list of all items equal to the max of the iterable"
	result, maxval = [], None
	key = key or (lambda x: x)
	for x in iterable:
		xval = key(x)
		if not result or xval > maxval:
			result, maxval = [x], xval
		elif xval == maxval:
			result.append(x)
	return result

def hand_percentages(n=700*1000):
	"sample n random hands and print a table of percentages for each type of hand"
	counts = [0] * 9
	for i in range(n/10):
		for hand in deal(10):
			ranking = hand_rank(hand)[0]
			counts[ranking] += 1
	for i in reversed(range(9)):
		print "%14s: %6.3f %%" % (hand_names[i], 100.*counts[i]/n)


def hand_rank(hand):
	"return a value indicating the ranking of a hand"
	# counts is the count of each rank; ranks lists corresponding ranks
	# eg '7 T 7 9 7' => counts = (3,1,1,); ranks = (7,10,9)
	groups = group(['--23456789TJQKA'.index(r) for r,s in hand])
	counts, ranks = unzip(groups)
	if ranks == (14,5,4,3,2):
		ranks = (5,4,3,2,1)
	straight = len(ranks) == 5 and max(ranks)-min(ranks) == 4
	flush = len(set([s for r,s in hand])) == 1
	return max(count_rankings[counts], 4*straight + 5*flush), ranks

	# return (9 if (5,) == counts else #5 of a kind
	# 		8 if straight and flush else
	# 		7 if (4,1) == counts else #4 of a kind
	# 		6 if (3,2) == counts else #fullhouse
	# 		5 if flush else
	# 		4 if straight else
	# 		3 if (3,1,1) == counts else #3 of a kind
	# 		2 if (2,2,1) == counts else # 2 pairs
	# 		1 if (2,1,1,1) == counts else # 1 pair
	# 		0), ranks #high card

count_rankings = {(5,):10, (4,1):7, (3,2):6, (3,1,1):3, (2,2,1):2, (2,1,1,1):1, (1,1,1,1,1):0}

#poker has a name for all partitions for 5. 
#if we sort it, then it comes out to poker hands

def group(items):
	"return a list of [(count,x)...], highest count first, then highest x first"
	groups = [(items.count(x), x) for x in set(items)]
	return sorted(groups, reverse=True)

def unzip(pairs):
	return zip(*pairs)

def card_ranks(cards):
	"return a list of the ranks, sorted with higher first"
	ranks = ['--23456789TJQKA'.index(r) for r,s in cards]
	ranks.sort(reverse=True)
	return [5,4,3,2,1] if (ranks == [14,5,4,3,2]) else ranks #return [5,4,3,2,1] if we have a straight with an Ace

def straight(ranks):
	"return true if the ordered ranks form a 5-card straight"
	return (max(ranks) - min(ranks) == 4) and len(set(ranks)) == 5

def flush(hand):
	suits = [s for r,s in hand]
	return len(set(suits)) == 1

def kind(n, ranks):
	"""return the first rank that this hand has exactly n of.
	return none fi there is no n-of-a-kind in the hand."""
	for r in ranks:
		if n==ranks.count(r):
			return r
	return None

def two_pair(ranks):
	"""If there are two pair, return the two ranks as a 
	tuple: (highest, lowest); otherwise return None."""
	pair = kind(2, ranks)
	lowpair = kind(2, list(reversed(ranks)))
	if pair and lowpair != pair:
		return (pair, lowpair)
	else:
		return None

def test():
	"Test cases for the functions in poker program."
	sf = "6C 7C 8C 9C TC".split() #straight flush
	fk = "9D 9H 9S 9C 7D".split() #4 of a kind
	fh = "TD TC TH 7C 7D".split() #full house
	tp = "5S 5D 9H 9C 6S".split() #two pair
	s1 = "AS 2S 3S 4S 5C".split() #A-5 straight
	s2 = "2C 3C 4C 5S 6S".split() #2-6 straight
	ah = "AH 2S 3S 4S 6C".split() #A high
	sh = "2S 3S 4S 6C 7D".split() # 7 high
	#assert poker([s1,s2,ah,sh]) == 2
	fkranks = card_ranks(fk)
	tpranks = card_ranks(tp)
	assert kind(4, fkranks) == 9
	assert kind(3, fkranks) == None
	assert kind(2, fkranks) == None
	assert kind(1, fkranks) == 7
	assert straight([9,8,7,6,5]) == True
	assert straight([9,8,8,6,5]) == False
	assert flush(sf) == True
	assert flush(fk) == False
	assert card_ranks(sf) == [10,9,8,7,6]
	assert card_ranks(fk) == [9,9,9,9,7]
	assert card_ranks(fh) == [10,10,10,7,7]
	# assert poker([sf, fk, fh]) == sf #winning hand
	# assert poker([fk, fh]) == fk
	# assert poker([fh, fh]) == fh #test extreme values
	# assert poker([sf]) == sf #test for 1 hand
	# assert poker([sf] + 99*[fh]) == sf #tests for 100 hands
	assert hand_rank(sf) == (8,10)
	assert hand_rank(fk) == (7,9,7)
	assert hand_rank(fh) == (6,10,7)
	return "tests pass"

print test()

